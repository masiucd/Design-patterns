(()=>{"use strict";var t=function(){function t(t,n,e){this.teacher=t,this.courses=n,this.students=e}return t.prototype.render=function(){this.teacher.init(),this.courses.init(),this.students.init()},t}(),n=function(){function t(t,n,e,i){this.parentElement=t,this.dataList=n,this.title=e,this.subTitles=i}return t.prototype.clickHandler=function(t){console.log(document.querySelectorAll("tr")),document.querySelectorAll("tr").forEach((function(n){return n.addEventListener("click",(function(){t(n.dataset.id)}))}))},t.prototype.render=function(){var t='\n    <div class="table-wrapper wrapper-'+this.title+'">\n    <table>\n        <caption>'+this.title+"</caption>\n        <thead>\n          "+this.subTitles.map((function(t){return"<th>"+t+"</th>"})).join("")+"\n        </thead>\n        <tbody>\n          "+this.dataList.map((function(t){var n=t.displayInfo();return'\n                <tr data-id="'+t.id+'">\n                '+Object.keys(n).map((function(t){return"<td>"+n[t]+"</td>"})).join("")+"\n                </tr>\n          "})).join("")+"\n        </tbody>\n      </table>\n    </div>\n    ";this.parentElement.innerHTML=t},t.prototype.init=function(){this.render()},t}();let e=(t=21)=>{let n="",e=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let i=63&e[t];n+=i<36?i.toString(36):i<62?(i-26).toString(36).toUpperCase():i<63?"_":"-"}return n};var i,o=function(){function t(t,n,e,i){this.id=t,this.title=n,this.description=e,this.duration=i}return t.prototype.displayInfo=function(){return{title:this.title,duration:this.duration}},t}(),r=function(){function t(t){this.parentElement=t,this.coursesView=new n(this.parentElement,[new o(e(),"math","math is wonderful","6h"),new o(e(),"history","history is good for you","3h"),new o(e(),"swedish","without swedish you will face some serious problems","2h"),new o(e(),"english","the global language, learn it NOW!!!","5h")],"Courses",["title","duration"])}return t.prototype.init=function(){this.coursesView.init()},t}(),s=function(t,n,e,i,o){this.id=t,this.firstName=n,this.lastName=e,this.email=i,this.age=o},a=(i=function(t,n){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}i(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),c=function(t){function n(n,e,i,o,r){var s=t.call(this,n,e,i,o,r)||this;return s.subjects=[],s}return a(n,t),n.prototype.displayInfo=function(){return{name:this.firstName+"-"+this.lastName,email:this.email,age:""+this.age}},n}(s),u=function(){function t(t){this.parentElement=t,this.teachersView=new n(this.parentElement,[new c(e(),"Frank","Smith","frank@io.com",43),new c(e(),"Logan","Jonsson","logan@io.com",47),new c(e(),"Mia","Greger","mia@io.com",41),new c(e(),"Boris","Rooney","frank@io.com",53)],"Teachers",["name","email","age"])}return t.prototype.init=function(){this.teachersView.init()},t}(),l=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function i(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}}(),h=function(t){function n(n,e,i,o,r){return t.call(this,n,e,i,o,r)||this}return l(n,t),n.prototype.displayInfo=function(){return{name:this.firstName+"-"+this.lastName,email:this.email,age:""+this.age}},n}(s),d=function(){return[new h(e(),"Frank","Mellberg","frank@isObject.com",21),new h(e(),"Rio","Ferdinand","rio@isObject.com",25),new h(e(),"Nemanja","Vidic","nemanja@isObject.com",32),new h(e(),"Fredrik","ljungberg","fredrik@isObject.com",32),new h(e(),"Lotta","Schelin","lotta@isObject.com",21),new h(e(),"Stina","Olofsson","sina@isObject.com",21)]},p=function(){function t(t,n){this.parentElement=t,this.data=n}return t.prototype.render=function(){var t,n=this,e='\n      <p id="apa">'+this.data+"</p>\n    ";null===(t=document.getElementById("apa"))||void 0===t||t.addEventListener("click",(function(){console.log(n,"student has been clicked")})),this.parentElement.insertAdjacentHTML("beforeend",e)},t}(),f=function(){function t(t){this.parentElement=t,this.studentsView=new n(this.parentElement,d(),"Students",["name","email","age"])}return t.prototype.handleAddStudent=function(){var t=this;this.studentsView.clickHandler((function(n){var e=d().find((function(t){return t.id===n})),i=(null==e?void 0:e.firstName)+" - "+(null==e?void 0:e.lastName);new p(t.parentElement,i).render()}))},t.prototype.init=function(){this.studentsView.init(),this.handleAddStudent()},t}();new t(new u(document.getElementById("teacher")),new r(document.getElementById("course")),new f(document.getElementById("student"))).render()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,