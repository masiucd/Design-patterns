(()=>{"use strict";var t,n=function(){function t(t,n){this.teacher=t,this.students=n}return t.prototype.render=function(){this.teacher.init(),this.students.init()},t}(),e=function(){function t(t,n,e,i){this.parentElement=t,this.dataList=n,this.title=e,this.subTitles=i}return t.prototype.clickHandler=function(t){document.querySelectorAll("tr").forEach((function(n){return n.addEventListener("click",(function(){t(parseInt(n.dataset.id,10)),sessionStorage.setItem("user",String(n.dataset.id))}))}))},t.prototype.render=function(){var t='\n    <div class="table-wrapper wrapper-'+this.title+'">\n    <table class="'+this.title+'">\n        <caption>'+this.title+"</caption>\n        <thead>\n          "+this.subTitles.map((function(t){return"<th>"+t+"</th>"})).join("")+"\n        </thead>\n        <tbody>\n          "+this.dataList.map((function(t){var n=t.displayInfo();return'\n                <tr data-id="'+t.id+'">\n                '+Object.keys(n).map((function(t){return'<td data-info="'+n[t]+'">'+n[t]+"</td>"})).join("")+"\n                </tr>\n          "})).join("")+"\n        </tbody>\n      </table>\n    </div>\n    ";this.parentElement.innerHTML=t},t.prototype.renderRawHtml=function(){return'\n    <div class="table-wrapper wrapper-'+this.title+'">\n    <table>\n        <caption>'+this.title+"</caption>\n        <thead>\n          "+this.subTitles.map((function(t){return"<th>"+t+"</th>"})).join("")+"\n        </thead>\n        <tbody>\n          "+this.dataList.map((function(t){var n=t.displayInfo();return'\n                <tr data-id="'+t.id+'">\n                '+Object.keys(n).map((function(t){return"<td>"+n[t]+"</td>"})).join("")+"\n                </tr>\n          "})).join("")+"\n        </tbody>\n      </table>\n    </div>\n    "},t.prototype.mount=function(t){t.innerHTML=this.renderRawHtml()},t.prototype.init=function(){this.render()},t}(),i=function(t,n,e,i,o){this.id=t,this.firstName=n,this.lastName=e,this.email=i,this.age=o},o=(t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)},function(n,e){function i(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),r=function(t){function n(n,e,i,o,r){var s=t.call(this,n,e,i,o,r)||this;return s.subjects=[],s}return o(n,t),n.prototype.displayInfo=function(){return{name:this.firstName+"-"+this.lastName,email:this.email,age:""+this.age}},n}(i),s=function(){function t(t){this.parentElement=t,this.teachersView=new e(this.parentElement,[new r(1,"Frank","Smith","frank@io.com",43),new r(2,"Logan","Jonsson","logan@io.com",47),new r(3,"Mia","Greger","mia@io.com",41),new r(4,"Boris","Rooney","frank@io.com",53)],"Teachers",["name","email","age"])}return t.prototype.init=function(){this.teachersView.init()},t}(),a=function(){function t(){this.students={}}return t.prototype.registerStudent=function(t){this.students[t.firstName]=t,t.adminMediator=this},t.prototype.send=function(t,n,e){var i=this;e?e.receive(t,n):Object.keys(this.students).forEach((function(e){i.students[e]!==n&&i.students[e].receive(t,n)}))},t}(),u=function(){function t(){this.courses={}}return t.prototype.registerCourse=function(t){this.courses[t.title]=t,t.courseMediator=this},t.prototype.send=function(t,n,e){},t}(),c=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function i(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}}(),l=function(t){function n(n,e,i,o,r){var s=t.call(this,n,e,i,o,r)||this;return s.adminMediator=null,s}return c(n,t),n.prototype.displayInfo=function(){return{name:this.firstName+"-"+this.lastName,email:this.email,age:""+this.age}},n.prototype.send=function(t,n){var e;null===(e=this.adminMediator)||void 0===e||e.send(t,this,n)},n.prototype.receive=function(t,n){return t+" - from "+n},n}(i),d=new a;console.log("adminMediator",d);var h=function(){return[new l(1,"Frank","Mellberg","frank@io.com",21),new l(2,"Rio","Ferdinand","rio@io.com",25),new l(3,"Nemanja","Vidic","nemanja@io.com",32),new l(4,"Fredrik","ljungberg","fredrik@io.com",32)]};console.log(h()[0].send("hello"));var p=function(){function t(t,n,i,o,r){this.parentElement=t,this.list=n,this.data=i,this.title=o,this.subTitles=r,this.listView=new e(this.parentElement,this.list,this.title,this.subTitles),this.confirmationText=""}return t.prototype.updateText=function(t){console.log("TEXT",t),this.confirmationText=t},t.prototype.render=function(){var t,n=this,e=document.querySelector(".modal");e.classList.add("show-modal");var i='\n    <div class="modal-container">\n      '+this.listView.renderRawHtml()+"\n      "+this.confirmationText+'\n      <button class="close-modal">\n        ‚ùå\n      </button>\n    </div>\n    ';e.innerHTML=i,null===(t=document.querySelector(".close-modal"))||void 0===t||t.addEventListener("click",(function(){e.classList.remove("show-modal"),e.innerHTML=""})),document.querySelectorAll(".modal tbody tr").forEach((function(t){t.addEventListener("click",(function(t){if("send"in n.data){var e="You have now been registered to the "+t.target.innerText+" Course";n.data.send(e,n.data),n.updateText(e),n.updateHtml()}}))}))},t.prototype.updateHtml=function(){this.render()},t}(),f=function(){function t(t,n,e,i){this.id=t,this.title=n,this.description=e,this.duration=i,this.courseMediator=null}return t.prototype.displayInfo=function(){return{title:this.title,duration:this.duration}},t.prototype.send=function(){},t.prototype.receive=function(){},t}(),m=(new u,function(){return[new f(1,"math","math is wonderful","6h"),new f(2,"history","history is good for you","3h"),new f(3,"swedish","without swedish you will face some serious problems","2h"),new f(4,"english","the global language, learn it NOW!!!","5h")]}),y=function(){function t(){}return t.prototype.clickHandler=function(){},t}(),w=function(){function t(t){this.parentElement=t,this.studentsView=new e(this.parentElement,h(),"Students",["name","email","age"]),this.profileView=new y}return t.prototype.handleClickStudent=function(){this.studentsView.clickHandler((function(t){var n=h().find((function(n){return n.id===t}));console.log("data",n);var e=m(),i=document.querySelector(".modal-list");new p(i,e,n,"courses",["title","duration"]).render()}))},t.prototype.handleShowProfile=function(){},t.prototype.init=function(){this.studentsView.init(),this.handleClickStudent(),function(){for(var t=0,n=h();t<n.length;t++){var e=n[t];d.registerStudent(e)}}(),console.log("adminMediator",d)},t}();new n(new s(document.getElementById("teacher")),new w(document.getElementById("student"))).render()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,