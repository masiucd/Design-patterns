(()=>{"use strict";var t,n=function(){function t(t,n,e,o){this.id=t,this.subject=n,this.students=e,this.teacher=o}return t.prototype.addStudent=function(t,n){this.students.push(t),t.subjects.push(n)},t.prototype.removeStudent=function(t){this.students=this.students.filter((function(n){return n.id!==t}))},t.prototype.getStudent=function(t){var n=this.students.find((function(n){return n.id===t}));return n&&n},t}(),e=function(t,n,e){this.id=t,this.firstName=n,this.lastName=e},o=(t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)},function(n,e){function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}),r=function(t){function n(n,e,o,r){var i=t.call(this,n,e,o)||this;return i.subjects=r,i}return o(n,t),n}(e),i=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),s=function(t){function n(n,e,o,r){var i=t.call(this,n,e,o)||this;return i.subjects=r,i}return i(n,t),n}(e);let u=(t=21)=>{let n="",e=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let o=63&e[t];n+=o<36?o.toString(36):o<62?(o-26).toString(36).toUpperCase():o<63?"_":"-"}return n};var c,a,p,f,h,l;c=new s(u(),"Mike","Szymkowiak",[]),a=new s(u(),"Jon","Smith",[]),p=new s(u(),"Clara","Sten",[]),f=new r(u(),"Boris","Einstein",[]),h=new r(u(),"Linda","Smith",[]),new r(u(),"Mia","Jonson",[]),l=new n(u(),"math",[],f),new n(u(),"english",[],f),new n(u(),"swedish",[],f),console.log(c,a,p,l,h)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,