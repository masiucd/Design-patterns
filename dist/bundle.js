(()=>{"use strict";var t,e=function(){function t(t,e,n,i){this.id=t,this.subject=e,this.students=n,this.teacher=i}return t.prototype.addStudent=function(t,e){this.students.push(t),t.subjects.push(e)},t.prototype.removeStudent=function(t){this.students=this.students.filter((function(e){return e.id!==t}))},t.prototype.getStudent=function(t){var e=this.students.find((function(e){return e.id===t}));return e&&e},t}(),n=function(t,e,n){this.id=t,this.firstName=e,this.lastName=n},i=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}),r=function(t){function e(e,n,i,r){var s=t.call(this,e,n,i)||this;return s.subjects=r,s}return i(e,t),e}(n),s=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),o=function(t){function e(e,n,i,r){var s=t.call(this,e,n,i)||this;return s.subjects=r,s}return s(e,t),e}(n),u=function(){function t(t,e,n){this.students=t,this.courses=e,this.teachers=n,this.main=this.getElement("#root"),this.wrapper=this.createElement("div","wrapper"),this.title=this.createElement("h1","main-title"),this.title.textContent="WesCoast",this.coursesList=this.createElement("ul","courses-list"),this.studentList=this.createElement("ul","students-list"),this.teachersList=this.createElement("ul","teachaers-list"),this.form=this.createElement("form","backlog-form"),this.input=this.createElement("input","add-input"),this.input.type="text",this.input.placeholder="enter a new backlog to the backlog...",this.submitButton=this.createElement("button","add-btn"),this.submitButton.innerText="submit",this.form.append(this.input,this.submitButton),this.wrapper.append(this.title,this.form,this.coursesList,this.studentList,this.teachersList),this.main.append(this.wrapper)}return t.prototype.createElement=function(t,e){void 0===e&&(e="");var n=document.createElement(t);return e&&n.classList.add(e),n},t.prototype.getElement=function(t){return document.querySelector(t)},t.prototype.renderStudents=function(){return this.students.map((function(t){return"\n        <li>"+t.firstName+"-"+t.lastName+"</li>\n      "})).join("")},t.prototype.renderTeachers=function(){return this.teachers.map((function(t){return"\n        <li>"+t.firstName+"-"+t.lastName+"</li>\n      "})).join("")},t.prototype.renderCourses=function(){return this.courses.map((function(t){return"\n        <li>"+t.subject+"</li>\n      "})).join("")},t.prototype.render=function(){this.studentList.innerHTML="\n      <li> <strong> Student List </strong> </li>\n      "+this.renderStudents()+"\n    ",this.teachersList.innerHTML="\n      <li> <strong>Teachers List</strong> </li>\n      "+this.renderTeachers()+"\n    ",this.coursesList.innerHTML="\n      <li> <strong>Courses List</strong> </li>\n      "+this.renderCourses()+"\n    "},t}();let c=(t=21)=>{let e="",n=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let i=63&n[t];e+=i<36?i.toString(36):i<62?(i-26).toString(36).toUpperCase():i<63?"_":"-"}return e};var a,h,p,l,f,d,m;a=new o(c(),"Mike","Szymkowiak",[]),h=new o(c(),"Jon","Smith",[]),p=new o(c(),"Clara","Sten",[]),l=new r(c(),"Boris","Einstein",[]),f=new r(c(),"Linda","Smith",[]),d=new r(c(),"Mia","Jonson",[]),m=new u([a,h,p],[new e(c(),"math",[],l),new e(c(),"english",[],l),new e(c(),"swedish",[],l)],[l,f,d]),console.log(m.render())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,