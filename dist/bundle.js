(()=>{"use strict";var t=function(){function t(t,n){this.teacher=t,this.courses=n}return t.prototype.render=function(){this.teacher.init(),this.courses.init()},t}(),n=function(){function t(t,n,e,i){this.parentElement=t,this.dataList=n,this.title=e,this.subTitles=i}return t.prototype.render=function(){var t='\n    <div class="table-wrapper wrapper-'+this.title+'">\n    <table>\n        <caption>'+this.title+"</caption>\n        <thead>\n          "+this.subTitles.map((function(t){return"<th>"+t+"</th>"})).join("")+"\n        </thead>\n        <tbody>\n          "+this.dataList.map((function(t){var n=t.displayInfo();return"\n                <tr>\n                "+Object.keys(n).map((function(t){return"<td>"+n[t]+"</td>"})).join("")+"\n                </tr>\n          "})).join("")+"\n        </tbody>\n      </table>\n    </div>\n    ";this.parentElement.insertAdjacentHTML("beforebegin",t)},t.prototype.init=function(){this.render()},t}();let e=(t=21)=>{let n="",e=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let i=63&e[t];n+=i<36?i.toString(36):i<62?(i-26).toString(36).toUpperCase():i<63?"_":"-"}return n};var i,o=function(){function t(t,n,e,i){this.id=t,this.title=n,this.description=e,this.duration=i}return t.prototype.displayInfo=function(){return{title:this.title,duration:this.duration}},t}(),r=function(){function t(t){this.parentElement=t,this.coursesView=new n(this.parentElement,[new o(e(),"math","math is wonderful","6h"),new o(e(),"history","history is good for you","3h"),new o(e(),"swedish","without swedish you will face some serious problems","2h"),new o(e(),"english","the global language, learn it NOW!!!","5h")],"Courses",["title","duration"])}return t.prototype.init=function(){this.coursesView.init()},t}(),s=(i=function(t,n){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}i(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),a=function(t){function n(n,e,i,o,r){var s=t.call(this,n,e,i,o,r)||this;return s.subjects=[],s}return s(n,t),n.prototype.displayInfo=function(){return{name:this.firstName+"-"+this.lastName,email:this.email,age:""+this.age}},n}((function(t,n,e,i,o){this.id=t,this.firstName=n,this.lastName=e,this.email=i,this.age=o}));new t(new(function(){function t(t){this.parentElement=t,this.teachersView=new n(this.parentElement,[new a(e(),"Frank","Smith","frank@io.com",43),new a(e(),"Logan","Jonsson","logan@io.com",47),new a(e(),"Mia","Greger","mia@io.com",41),new a(e(),"Boris","Rooney","frank@io.com",53)],"Teachers",["name","email","age"])}return t.prototype.init=function(){this.teachersView.init()},t}())(document.getElementById("teacher")),new r(document.getElementById("course"))).render()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,