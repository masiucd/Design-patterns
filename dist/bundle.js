(()=>{"use strict";var o,t,e=function(){function o(o){this.todos=o}return o.prototype.getElement=function(o){return document.querySelector(o)},o.prototype.createElement=function(o,t,e){void 0===o&&(o=""),void 0===t&&(t=""),void 0===e&&(e="");var n=document.createElement(o);return t&&(n.id=t),e&&n.classList.add(e),n},o.prototype._getTodoText=function(){return document.getElementById("form-input").value},o.prototype._resetInput=function(){var o=document.getElementById("form-input");o.value=o.value=""},o.prototype.bindToggleTodo=function(o){var t=document.querySelectorAll(".todo-item");console.log(t)},o.prototype.renderTodos=function(){return this.todos.map((function(o){return'\n        <li id="todo-item" class="todo-item">\n          <label for="checked">\n            <input type="checkbox" name="checked" id="checked">\n          </label>\n          <strong>'+o.task+'</strong> \n          <button id="delete">delete</button>\n        </li>'})).join("")},o.prototype.mount=function(o){o.appendChild(this.render()),this.update()},o.prototype.render=function(){var o=this.createElement("div","wrapper","wrapper");return o.innerHTML='\n    <main id="main">\n      <h1>Todo List</h1>\n        <form action="" id="form">\n          <div class="form-group">\n            <input type="text" id="form-input" />\n          </div>\n          <div class="form-button-group">\n            <button type="submit">addTodo</button>\n          </div>\n        </form>\n        <ul id="todo-list">\n          '+this.renderTodos()+"\n        </ul>\n    </main>\n      ",o},o.prototype.update=function(){for(var o=document.querySelectorAll(".todo-item"),t=0,e=Array.from(o);t<e.length;t++)e[t],console.log(document.querySelector("#checked")),document.querySelectorAll("#checked").forEach((function(o){o.addEventListener("change",(function(o){console.log(o.target.checked)}))}));console.log(o)},o}(),n=function(){return(n=Object.assign||function(o){for(var t,e=1,n=arguments.length;e<n;e++)for(var d in t=arguments[e])Object.prototype.hasOwnProperty.call(t,d)&&(o[d]=t[d]);return o}).apply(this,arguments)},d=function(){function o(){this.todos=[],this.todos=[{id:1,task:"go out with the dog",completed:!1},{id:2,task:"done homework",completed:!0},{id:3,task:"go out for a run",completed:!0},{id:4,task:"cook some food",completed:!1}]}return o.prototype.addTodo=function(o){return this.todos.push(o),this.todos},o.prototype.editTodo=function(o,t,e){return void 0===t&&(t=""),void 0===e&&(e=!1),this.todos=this.todos.map((function(d){return d.id===o?n(n({},d),{task:t,completed:e}):d})),this.todos},o.prototype.toggleTodo=function(o){return this.todos=this.todos.map((function(t){return t.id===o?n(n({},t),{completed:!t.completed}):t})),this.todos},o.prototype.removeTodo=function(o){return this.todos=this.todos.filter((function(t){return t.id!==o})),this.todos},Object.defineProperty(o.prototype,"allTodos",{get:function(){return this.todos},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,"size",{get:function(){return this.todos.length},enumerable:!1,configurable:!0}),o.prototype.findTodo=function(o){return this.todos.find((function(t){return t.id===o}))},o}();o=document.getElementById("root"),new function(o,t){var e=this;this.handleAddTodo=function(o){e.model.addTodo(o)},this.handleEditTodo=function(o,t,n){e.model.editTodo(o,t,n)},this.handleDeleteTodo=function(o){e.model.removeTodo(o)},this.handleMount=function(o){e.view.mount(o)},this.handleToggle=function(o){e.model.toggleTodo(o)},this.model=o,this.view=t,this.view.bindToggleTodo(this.handleAddTodo)}(t=new d,new e(t.allTodos)).handleMount(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,